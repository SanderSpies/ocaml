(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*                             Sander Spies                               *)
(*                                                                        *)
(*   Copyright 2017 - 2018                                                *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* From C-- to WebAssembly object file AST *)

open Cmm
open Typed_cmm
open Ast
open Values
open Wasm_types

(*
  WebAssembly (wasm) is a secure stackmachine. It guarantees security by using 
  type safety for all variables, limiting memory access, and having no access 
  to the stack. 
  
  It's possible to hack around not having stack access, but it's probably wiser 
  to wait for the right additions in wasm to appear. Luckily this already being 
  worked on:
  - https://github.com/WebAssembly/exception-handling/blob/master/proposals/Level-1.md
  - https://github.com/WebAssembly/gc/pull/34 
  - https://github.com/WebAssembly/tail-call/blob/master/proposals/tail-call/Overview.md 

  The code is compiled to the wasm object file format, which is defined here: 
  https://github.com/WebAssembly/tool-conventions/blob/master/Linking.md. This
  is required to be able to use LLVM's LLD to link the generated wasm binary 
  with other code that's compiled to wasm (from clang for example).
*)

type block_stack_item =
| BLoop
| BIfthenelse
| BCswitch_main
| BCswitch_case of string
| BWith of int
| BCcatch 
| BCheckbound1
| BCheckbound2

type block_stack = block_stack_item Stack.t

let block_stack : block_stack = Stack.create ()

let unique_counter = ref 0

let name s =
  try Utf8.decode s with Utf8.Utf8 ->
    failwith "invalid UTF-8 encoding"

(* the resulting wasm module *)
let wasm_module = ref {
  types = [];
  globals = [];
  tables = Types.[{
    ttype = TableType ({min = 0l; max = Some 0l}, AnyFuncType)
  }];
  memories = Types.[{
    (* TODO: this needs to be improved when doing GC *)
    mtype = MemoryType {min = 100l; max = Some 100l}
  }];
  (*  
  (import "env" "caml_write_fd" (func $caml_write_fd (type 1))) (* (type (;1;) (func (param i32 i32 i32 i32) (result i32))) *)
  (import "env" "caml_read_fd" (func $caml_read_fd (type 1))) (* (type (;1;) (func (param i32 i32 i32 i32) (result i32))) *)
  (import "env" "caml_callback2_exn" (func $caml_callback2_exn (type 2))) (*(type (;2;) (func (param i32 i32 i32) (result i32))) *) 
  *)  
  funcs = [
    (* 
    FUNCTION(G(caml_callback_exn))
CFI_STARTPROC
    /* Save callee-save registers */
        PUSH_CALLEE_SAVE_REGS
    /* Initial loading of arguments */
        movq    C_ARG_1, %rbx      /* closure */
        movq    C_ARG_2, %rax      /* argument */
        movq    0(%rbx), %r12      /* code pointer */
        jmp     LBL(caml_start_program)
CFI_ENDPROC
    *)
    (* {

    }; *)
    {
    name = "jsRaise_i32_i32";
    ftype = "type_";
    locals = [("temp", I32Type)];
    body = [Unreachable; Const (I32 0l)];
    no_of_args = 1
  };  
  {
    name = "getpid";
    ftype = "re_i32";
    locals = [];
    body = [
      Const (I32 9999l)
    ];
    no_of_args = 0
  };
  {
    name = "getppid";
    ftype = "re_i32";
    locals = [];
    body = [
      Const (I32 5l)
    ];
    no_of_args = 0
  };
  {
      name = "stack_bottom";
      ftype = "re_i32";
      locals = [];
      (* TODO: print last 10 stack values *)
      body = [
        (* Call ("print_i32", [[GetGlobal "__stack_pointer"; Const (I32 32l); Binary (I32 I32Op.Add)]]);
        Call ("print_i32", [[GetGlobal "__stack_pointer"; Const (I32 24l); Binary (I32 I32Op.Add)]]);
        Call ("print_i32", [[GetGlobal "__stack_pointer"; Const (I32 16l); Binary (I32 I32Op.Add)]]);
        Call ("print_i32", [[GetGlobal "__stack_pointer"; Const (I32 8l); Binary (I32 I32Op.Add)]]); *)
        GetGlobal "__stack_pointer"        
      ];
      no_of_args = 0;
    };
  {
    name = "caml_callback_exn";
    ftype = "i32->i32->i32";
    locals = [("temp", I32Type); ("temp2", I32Type);];
    body = [
    Unreachable      

    ];
    no_of_args = 2
  };
  {
    name = "caml_init_signals";
    ftype = "empty_type";
    locals = [("temp", I32Type)];
    body = [];
    no_of_args = 0
  };
  {
    name = "caml_debugger_init";
    ftype = "empty_type";
    locals = [("temp", I32Type)];
    body = [];
    no_of_args = 0
  };
  {
    name = "setjmp";
    ftype = "type_";
    locals = [("temp", I32Type)];
    body = [Unreachable; Const (I32 0l)];
    no_of_args = 1
  };
  {
    name = "Saved_return_address";
    ftype = "type_";
    locals = [("temp", I32Type)];
    body = [Unreachable; Const (I32 0l)];
    no_of_args = 1
  };  
  {
    name = "Callback_link";
    ftype = "type_";
    locals = [("temp", I32Type)];
    body = [Unreachable; Const (I32 0l)];
    no_of_args = 1
  }; 
  {
    name = "caml_raise_exception";
    ftype = "raise_i32_ftype";
    locals = [("value", I32Type)];
    body = [
      Unreachable


    ];
    no_of_args = 1
  };
  {
    name = "caml_callback2_exn";
    ftype = "i32->i32->i32->i32";
    locals = [("temp", I32Type); ("temp2", I32Type); ("temp3", I32Type); ];
    body = [Unreachable; Const (I32 0l)];
    no_of_args = 3
  };
  {
    name = "geteuid";
    ftype = "re_i32";
    locals = [("temp", I32Type)];
    body = [Unreachable; Const (I32 0l)];
    no_of_args = 0
  };
  {
    name = "getuid";
    ftype = "re_i32";
    locals = [("temp", I32Type)];
    body = [Unreachable; Const (I32 0l)];
    no_of_args = 0
  };
  {
    name = "getegid";
    ftype = "re_i32";
    locals = [("temp", I32Type)];
    body = [Unreachable; Const (I32 0l)];
    no_of_args = 0
  };
  {
    name = "getgid";
    ftype = "re_i32";
    locals = [("temp", I32Type)];
    body = [Unreachable; Const (I32 0l)];
    no_of_args = 0
  };
  (* 
/* Start the OCaml program */

FUNCTION(G(caml_start_program))
       CFI_STARTPROC
    /* Save callee-save registers */
        PUSH_CALLEE_SAVE_REGS
    /* Initial entry point is G(caml_program) */
        LEA_VAR(caml_program, %r12)
    /* Common code for caml_start_program and caml_callback* */
LBL(caml_start_program):
    /* Build a callback link */
#ifdef WITH_SPACETIME
        PUSH_VAR(caml_spacetime_trie_node_ptr)
#else
        subq    $8, %rsp; CFI_ADJUST (8)        /* stack 16-aligned */
#endif
        PUSH_VAR(caml_gc_regs)
        PUSH_VAR(caml_last_return_address)
        PUSH_VAR(caml_bottom_of_stack)
#ifdef WITH_SPACETIME
        /* Save arguments to caml_callback* */
        pushq   %rax; CFI_ADJUST (8)
        pushq   %rbx; CFI_ADJUST (8)
        pushq   %rdi; CFI_ADJUST (8)
        pushq   %rsi; CFI_ADJUST (8)
        /* No need to push %r12: it's callee-save. */
        movq    %r12, C_ARG_1
        LEA_VAR(caml_start_program, C_ARG_2)
        call    GCALL(caml_spacetime_c_to_ocaml)
        popq    %rsi; CFI_ADJUST (-8)
        popq    %rdi; CFI_ADJUST (-8)
        popq    %rbx; CFI_ADJUST (-8)
        popq    %rax; CFI_ADJUST (-8)
#endif
    /* Setup alloc ptr and exception ptr */
        LOAD_VAR(caml_young_ptr, %r15)
        LOAD_VAR(caml_exception_pointer, %r14)
    /* Build an exception handler */
        lea     LBL(108)(%rip), %r13
        pushq   %r13; CFI_ADJUST(8)
        pushq   %r14; CFI_ADJUST(8)
        movq    %rsp, %r14
#ifdef WITH_SPACETIME
        LOAD_VAR(caml_spacetime_trie_node_ptr, %r13)
#endif
    /* Call the OCaml code */
        call    *%r12
LBL(107):
    /* Pop the exception handler */
        popq    %r14; CFI_ADJUST(-8)
        popq    %r12; CFI_ADJUST(-8)   /* dummy register */
LBL(109):
    /* Update alloc ptr and exception ptr */
        STORE_VAR(%r15,caml_young_ptr)
        STORE_VAR(%r14,caml_exception_pointer)
    /* Pop the callback link, restoring the global variables */
        POP_VAR(caml_bottom_of_stack)
        POP_VAR(caml_last_return_address)
        POP_VAR(caml_gc_regs)
#ifdef WITH_SPACETIME
        POP_VAR(caml_spacetime_trie_node_ptr)
#else
        addq    $8, %rsp; CFI_ADJUST (-8);
#endif
    /* Restore callee-save registers. */
        POP_CALLEE_SAVE_REGS
    /* Return to caller. */
        ret
LBL(108):
    /* Exception handler*/
    /* Mark the bucket as an exception result and return it */
        orq     $2, %rax
        jmp     LBL(109)
CFI_ENDPROC  
  *)
  {
    name = "caml_start_program";
    ftype = "re_i32";
    locals = [("temp", I32Type)];
    body = [
      Call ("caml_program", []); 
      Const (I32 0l)];
    no_of_args = 1
  }
(* 
  (import "env" "geteuid" (func $geteuid (type 10)))
  (import "env" "getuid" (func $getuid (type 10)))
  (import "env" "getegid" (func $getegid (type 10)))
  (import "env" "getgid" (func $getgid (type 10)))
*)

  ];
  start = None;
  elems = [];
  data = [];
  imports = [];
  exports = [];
  symbols = [];
}

let unique_name_counter = ref 0

let global_offset = ref 0

let blockheader_details header =
  let word_size = Nativeint.shift_right header 10 in
  let tag = (Nativeint.logand header 255n) in
  (word_size, tag)

let begin_assembly () = (
  global_offset := !global_offset + 8; (* TODO: make this a bit smarter (eg. count the previous sizes) *)
  let w = !wasm_module in
  let module_name = "caml"  ^ (Compilenv.current_unit_name ()) in
  (* 
   Pointers into the minor heap.
   [caml_young_base]
       The [malloc] block that contains the heap.
   [caml_young_start] ... [caml_young_end]
       The whole range of the minor heap: all young blocks are inside
       this interval.
   [caml_young_alloc_start]...[caml_young_alloc_end]
       The allocation arena: newly-allocated blocks are carved from
       this interval, starting at [caml_young_alloc_end].
   [caml_young_alloc_mid] is the mid-point of this interval.
   [caml_young_ptr], [caml_young_trigger], [caml_young_limit]
       These pointers are all inside the allocation arena.
       - [caml_young_ptr] is where the next allocation will take place.
       - [caml_young_trigger] is how far we can allocate before triggering
         [caml_gc_dispatch]. Currently, it is either [caml_young_alloc_start]
         or the mid-point of the allocation arena.
       - [caml_young_limit] is the pointer that is compared to
         [caml_young_ptr] for allocation. It is either
         [caml_young_alloc_end] if a signal is pending and we are in
         native code, or [caml_young_trigger].
  *)  
  wasm_module := Ast.{w with  
    globals = [
      (* {
        name = "caml_young_base"; (* The [malloc] block that contains the heap. *)
        gtype = Types.GlobalType (Types.I32Type, Types.Mutable);
        value = [Const (I32 (-1l))]
      };
      {
        name = "caml_young_start"; (* ... caml_young_end - The whole range of the minor heap: all young blocks are inside this interval *)
        gtype = Types.GlobalType (Types.I32Type, Types.Mutable);
        value = [Const (I32 (-1l))]
      };
      {
        name = "caml_young_end"; 
        gtype = Types.GlobalType (Types.I32Type, Types.Mutable);
        value = [Const (I32 (-1l))]
      };
      {
        name = "caml_young_alloc_start"; (* The allocation arena: newly-allocated blocks are carved from this interval, starting at [caml_young_alloc_end] *)
        gtype = Types.GlobalType (Types.I32Type, Types.Mutable);
        value = [Const (I32 (-1l))]
      };
      {
        name = "caml_young_alloc_end";
        gtype = Types.GlobalType (Types.I32Type, Types.Mutable);
        value = [Const (I32 (-1l))]
      };
      {
        name = "caml_young_alloc_mid";
        gtype = Types.GlobalType (Types.I32Type, Types.Mutable);
        value = [Const (I32 (-1l))]
      };
      {
        name = "caml_young_ptr"; (* is where the next allocation will take place. *)
        gtype = Types.GlobalType (Types.I32Type, Types.Mutable);
        value = [Const (I32 (-1l))]
      };
      {
        name = "caml_young_trigger"; (* is how far we can allocate before triggering *)
        gtype = Types.GlobalType (Types.I32Type, Types.Mutable);
        value = [Const (I32 (-1l))]
      };
      {
        (* is the pointer that is compared to
         [caml_young_ptr] for allocation. It is either
         [caml_young_alloc_end] if a signal is pending and we are in
         native code, or [caml_young_trigger] *)

        name = "caml_young_limit"; 
        gtype = Types.GlobalType (Types.I32Type, Types.Mutable);
        value = [Const (I32 (-1l))]
      }; *)
      {
        name = "__stack_pointer";
        gtype = Types.GlobalType (Types.I32Type, Types.Mutable);
        value = [Const (I32 4l)]
      };
      {
        name = "max_young_wosize";
        gtype = Types.GlobalType (Types.I32Type, Types.Immutable);
        value = [Const (I32 256l)]
      };
    ];
    types = [
      {tname = "jsTryWithType"; tdetails = Types.FuncType ([Types.I32Type;Types.I32Type;Types.I32Type], [])};
      {tname = "type_"; tdetails = Types.FuncType ([Types.I32Type], [Types.I32Type])};
      {tname = "empty_type"; tdetails = Types.FuncType ([], [])};
      {tname = "raise_i32_ftype"; tdetails = Types.FuncType ([Types.I32Type], [])};
      {tname = "re_i32"; tdetails = Types.FuncType ([], [Types.I32Type])};
      {tname = "i32->i32->i32"; tdetails = Types.FuncType ([Types.I32Type; Types.I32Type], [Types.I32Type])};
      {tname = "i32->i32->i32->i32->i32"; tdetails = Types.FuncType ([Types.I32Type; Types.I32Type; Types.I32Type; Types.I32Type; ], [Types.I32Type])};
      {tname = "i32->i32->i32->i32"; tdetails = Types.FuncType ([Types.I32Type; Types.I32Type; Types.I32Type; ], [Types.I32Type])}
    ];
    data =  [
      {
        index =  0l;
        offset = [Const (I32 (I32.of_int_s !global_offset))];
        init = {
          name = module_name ^ "__data_begin";
          detail = [Int8 0];
        }
      }
    ];    
    imports = [      
      {
        module_name = name "spectest";
        item_name = name "print_i32";
        idesc = FuncImport "raise_i32_ftype"
      }
      (* {
        module_name = name "env";
        item_name = name "tryWith";
        idesc = FuncImport "jsTryWithType"
      }; *)
      (* {
        module_name = name "env";
        item_name = name "jsRaise_i32_i32";
        idesc = FuncImport "type_"
      }; *)
    ];
    exports = [
      {
        name = name "table";
        edesc = TableExport 0l;
      };
      {
        name = name "memory";
        edesc = MemoryExport 0l;
      }
    ];
    symbols = [
      {
        name = (module_name ^ "__data_begin");
        details = Data ({
          index = 0l;
          relocation_offset = 0l;
          size = 1l;
          offset = 0l
        })
      };
      {
        name = "caml_modify";
        details = Import ([I32Type; I32Type], [])
      }; 
      {
        name = "caml_alloc";
        details = Import ([I32Type; I32Type], [I32Type])
      };
      (*
        TEMPORARY HACK:
          - caml_int64_compare_unboxed
          - caml_int64_float_of_bits_unboxed
        should be removed once int 64 is properly handled.
      *)
      {
        name = "caml_int64_compare_unboxed";
        details = Import ([I64Type; I64Type], [I32Type])
      };
      {
        name = "caml_int64_compare";
        details = Import ([I64Type; I64Type], [I32Type])
      };
      {
        name = "caml_int64_float_of_bits_unboxed";
        details = Import ([I64Type], [F64Type])
      };
      {
        name = "caml_int64_equal";
        details = Import ([I64Type; I64Type], [I32Type])
      };      
      (* {
        name = "caml_sys_time_unboxed";
        details = Import ([], [F64Type])
      } *)
      (* TEMPORARY HACK:
        - apparently wasi wants this to be i32 * i64, while we expect it to be i32 * i32
      *)
      (* {
        name = "lseek";
        details = Import ([I32Type; I64Type; I32Type], [I64Type])
      } *)
    ]
  };
  global_offset := !global_offset + 1
)

let fundecl ({fun_name; fun_args; fun_body; _}) =
  Stack.clear block_stack;
  let (typed_cmm, rt, locals, fns) = Typed_cmm.add_types fun_name fun_args fun_body in
  let args = List.fold_left (fun a b -> a @ (Typed_cmm.mach_to_wasm (snd b))) [] fun_args in
  functions := fns;

  let ccatch_mapping: (int * int * string) list ref = ref [] in

  let find_ccatch_name i pos = 
    let rec find i pos mapping =
      match mapping with 
      | (i_, pos_, name) :: _ when i_ = i && pos_ = pos -> name
      | _ :: remaining -> find i pos remaining
      | _ -> assert false
    in
    find i pos !ccatch_mapping
  in
  let locals = ref locals in
  let add_local local =
    locals := !locals @ [local];  
    Int32.of_int (List.length !locals - 1)
  in
  let rec to_operations expression_list operation = 
    let el = List.fold_left (fun a (e, _) -> a @ (emit_expr e)) [] expression_list in
    let el2 = List.map (fun (e, _) -> emit_expr e) expression_list in
    match operation, expression_list with
    | Calloc, ((Tblockheader (header, _), _) as hd) :: rest -> (
        let (_word_size, tag) = blockheader_details header in
        let counter = !unique_name_counter in
        unique_name_counter := !unique_name_counter + 1;
        let name = "allocate_memory_pointer_" ^ string_of_int counter in
        ignore(add_local (name, typ_int));
        let position = ref 0 in
        let total_size = ref 0 in
        let calls = List.fold_left (fun calls (f, rt) ->
          let before = calls @
          [GetLocal name;
          Const (I32 (I32.of_int_s !position));
          Binary (I32 I32Op.Add)]
          in        
          let middle = match f with        
          | Tconst_symbol (symbol, Sfunction _) -> [FuncSymbol symbol]
          | Tconst_symbol (symbol, Sdata) -> [DataSymbol symbol]
          | _ as e -> emit_expr e
          in
          let add = match rt with 
          | [F32Type]
          | [I32Type] -> 4
          | [F64Type] -> 8
          | _ -> assert false
          in
          total_size := !total_size + add;
          let result = before @ middle @ [Store ("allocated_at_" ^ (string_of_int !position), {ty = List.hd rt; align = 0; offset = 0l; sz = None})]     
          in
          
          position := !position + add;
          result
        ) [] ([hd] @ rest)
        in  
        let result = [
          SetLocal (name, [Call ("caml_alloc", [[Const (I32 (Int32.of_int !total_size)); Const (I32 (Nativeint.to_int32 tag))]])]);
        ]
        @
        calls
        @    
        [GetLocal name;
        Const (I32 4l);
        Binary (I32 I32Op.Add)
        ]
        in 
        result
      )
    | Cmodi, [(fst, _); (snd, _)] ->
      let counter = !unique_name_counter in
      unique_name_counter := !unique_name_counter + 1;
      let a1 = "cmod_" ^ string_of_int counter in
      let a2 = "cmod2_" ^ string_of_int counter in
      ignore(add_local (a1, typ_int));
      ignore(add_local (a2, typ_int));
      let result =
      [SetLocal (a1, emit_expr fst);
        GetLocal a1;
        GetLocal a1] @
      (emit_expr snd) @
      [TeeLocal a2;
        Binary (I32 I32Op.DivS);
        GetLocal a2;
        Binary (I32 I32Op.Mul);
        Binary (I32 I32Op.Sub)]
      in 
      result
    | Ccheckbound, [(fst, _); (snd, _)] -> 
      let fst = emit_expr fst in
      let snd = emit_expr snd in    
      Stack.push BCheckbound1 block_stack;
      let i = fst @ [Const (I32 0l)] @ [Compare (I32 I32Op.LtS)] in
      let t = [
        Throw [Const (I32 1l)]        
      ] in
      Stack.push BCheckbound2 block_stack;
      let e = snd @ [Const (I32 0l)] @ [Compare (I32 I32Op.LtS)] @ [If ([], [
            Throw [Const (I32 1l)]
          ], [])]
      in
      ignore(Stack.pop block_stack);
      let result = i @ [If ([], t, e)] in
      ignore(Stack.pop block_stack);
      result
    | Cextcall (symbol, mt, _, _), _ ->   
      [Call (symbol, el2)] @ (if (mt = typ_void && symbol <> "caml_modify") then [Drop] else [])
    | Craise _, expr ->       
      [Throw (List.fold_left (fun all (a, _) -> all @ emit_expr a) [] expr)]
    | _ -> 
      el @ (match operation with 
      | Cload(Byte_unsigned, _) -> [Load ("Byte_unsigned", {ty = I32Type; align = 0; offset = 0l; sz = Some (Mem8, ZX)})]
      | Cload(Byte_signed, _) -> [Load ("Byte_signed", {ty = I32Type; align = 0; offset = 0l; sz = Some (Mem8, SX)})]
      | Cload(Sixteen_unsigned, _) -> [Load ("Sixteen_unsigned", {ty = I32Type; align = 0; offset = 0l; sz = Some (Mem16, ZX)})]
      | Cload(Sixteen_signed, _) -> [Load ("Sixteen_signed", {ty = I32Type; align = 0; offset = 0l; sz = Some (Mem16, SX)})]
      | Cload(Thirtytwo_unsigned, _) -> [Load ("Thirtytwo_unsigned", {ty = I32Type; align = 0; offset = 0l; sz = None})]
      | Cload(Thirtytwo_signed, _) -> [Load ("Thirtytwo_signed", {ty = I32Type; align = 0; offset = 0l; sz = None})]
      | Cload(Word_int, _) -> [Load ("Word_int", {ty = I32Type; align = 0; offset = 0l; sz = None})]
      | Cload(Word_val, _) -> [Load ("Word_val", {ty = I32Type; align = 0; offset = 0l; sz = None})]
      | Cload(Single, _) -> [Load ("Single", {ty = I32Type; align = 0; offset = 0l; sz = None})]
      | Cload(Double, _) -> [Load ("Double", {ty = F64Type; align = 0; offset = 0l; sz = None})]
      | Cload(Double_u, _) -> [Load ("Double_u", {ty = F64Type; align = 0; offset = 0l; sz = None})]
      | Cstore (Byte_unsigned, _) -> [Store ("Byte_unsigned", {ty = I32Type; align = 0; offset = 0l; sz = Some Mem8})]
      | Cstore (Byte_signed, _) -> [Store ("Byte_signed", {ty = I32Type; align = 0; offset = 0l; sz = Some Mem8})]
      | Cstore (Sixteen_unsigned, _) -> [Store ("Sixteen_unsigned", {ty = I32Type; align = 0; offset = 0l; sz = Some Mem16})]
      | Cstore (Sixteen_signed, _) -> [Store ("Sixteen_signed", {ty = I32Type; align = 0; offset = 0l; sz = Some Mem16})]
      | Cstore (Thirtytwo_unsigned, _) -> [Store ("Thirtytwo_unsigned", {ty = I32Type; align = 0; offset = 0l; sz = None})]
      | Cstore (Thirtytwo_signed, _) -> [Store ("Thirtytwo_signed", {ty = I32Type; align = 0; offset = 0l; sz = None})]
      | Cstore (Word_int, _) -> [Store ("Word_int", {ty = I32Type; align = 0; offset = 0l; sz = None})]
      | Cstore (Word_val, _) -> [Store ("Word_val", {ty = I32Type; align = 0; offset = 0l; sz = None})]
      | Cstore (Single, _) -> [Store ("Single", {ty = F64Type; align = 0; offset = 0l; sz = None})]
      | Cstore (Double, _) -> [Store ("Double", {ty = F64Type; align = 0; offset = 0l; sz = None})]
      | Cstore (Double_u, _) -> [Store ("Double_u", {ty = F64Type; align = 0; offset = 0l; sz = None})]
      | Caddv 
      | Caddi
      | Cadda -> [Binary (I32 I32Op.Add)]
      | Csubi -> [Binary (I32 I32Op.Sub)]
      | Cmuli
      | Cmulhi -> [Binary (I32 I32Op.Mul)]
      | Cdivi -> [Binary (I32 I32Op.DivS)]
      | Cand -> [Binary (I32 I32Op.And)]   
      | Cor -> [Binary (I32 I32Op.Or)]  
      | Cxor -> [Binary (I32 I32Op.Xor)]
      | Clsl -> [Binary (I32 I32Op.Shl)]
      | Clsr -> [Binary (I32 I32Op.ShrU)]
      | Casr -> [Binary (I32 I32Op.ShrS)]
      | Ccmpi Ceq -> [Compare (I32 I32Op.Eq)]
      | Ccmpi Cne -> [Compare (I32 I32Op.Ne)]
      | Ccmpi Clt -> [Compare (I32 I32Op.LtS)]
      | Ccmpi Cle -> [Compare (I32 I32Op.LeS)]
      | Ccmpi Cgt -> [Compare (I32 I32Op.GtS)]
      | Ccmpi Cge -> [Compare (I32 I32Op.GeS)]      
      | Ccmpa Ceq -> [Compare (I32 I32Op.Eq)]
      | Ccmpa Cne -> [Compare (I32 I32Op.Ne)]
      | Ccmpa Clt -> [Compare (I32 I32Op.LtS)]
      | Ccmpa Cle -> [Compare (I32 I32Op.LeS)]
      | Ccmpa Cgt -> [Compare (I32 I32Op.GtS)]
      | Ccmpa Cge -> [Compare (I32 I32Op.GeS)]
      | Cnegf -> [Unary (F64 F64Op.Neg)]
      | Cabsf -> [Unary (F64 F64Op.Abs)]
      | Caddf -> [Binary (F64 F64Op.Add)]
      | Csubf -> [Binary (F64 F64Op.Sub)]
      | Cmulf -> [Binary (F64 F64Op.Mul)]
      | Cdivf -> [Binary (F64 F64Op.Div)]
      | Cfloatofint -> [Convert (I64 I64Op.ExtendUI32); Convert (F64 F64Op.ReinterpretInt)]
      | Cintoffloat -> [Convert (I32 I32Op.TruncSF64)]
      | Ccmpf CFeq -> [Compare (F64 F64Op.Eq)]
      | Ccmpf CFneq -> [Compare (F64 F64Op.Ne)]
      | Ccmpf CFlt -> [Compare (F64 F64Op.Lt)]
      | Ccmpf CFle -> [Compare (F64 F64Op.Le)]
      | Ccmpf CFgt -> [Compare (F64 F64Op.Gt)]
      | Ccmpf CFge -> [Compare (F64 F64Op.Ge)]
      | Ccmpf CFnlt -> failwith "Not supported yet"
      | Ccmpf CFngt -> failwith "Not supported yet"
      | Ccmpf CFnle -> failwith "Not supported yet"
      | Ccmpf CFnge -> failwith "Not supported yet"
      
      | _ -> failwith ("Something is not handled here:" ^ string_of_int (List.length expression_list))
    )
  and emit_expr expression =
    match expression with
    | Tconst_int i -> [Const (I32 (I32.of_int_s i))]
    | Tconst_natint i -> [Const (I32 (I32.of_int_s (Nativeint.to_int i)))]
    | Tconst_float f -> [Const (F64 (F64.of_float f))]  
    | Tconst_symbol (symbol, _) -> [DataSymbol symbol]
    | Tblockheader (i, _) -> [Const (I32 (I32.of_int_s (Nativeint.to_int i)))]
    | Tvar (ident, _mt, _pos) -> [GetLocal (ident.Ident.name ^ "/" ^ string_of_int ident.Ident.stamp)]
    | Tassign (ident, e, _pos) -> [SetLocal ((ident.Ident.name ^ "/" ^ string_of_int ident.Ident.stamp), emit_expr e)]
    | Ttuple [] -> [Nop]
    | Tlet (ident, arg, arg_rt, fn_body, _pos) -> 
      let result = emit_expr arg in    
      if (arg_rt <> []) then (
        [SetLocal ((ident.Ident.name ^ "/" ^ string_of_int ident.Ident.stamp), result)]
        @
        (emit_expr fn_body)    
      )
      else
        result
  | Ttuple [Tconst_natint high; Tconst_natint low] ->
    let i64 = Int64.add (Int64.shift_left (Int64.of_nativeint high) 32) (Int64.of_nativeint low)
    in
    [Const (I64 i64)]    
  | Ttuple ([Top (Cload _, _, _, _) as el1; Top (Cload _, _, _, _) as el2]) ->
      emit_expr el1
      @
      [
        Convert (I64 I64Op.ExtendUI32);
        Const (I64 32L);
        Binary (I64 I64Op.Shl)
      ]
      @
      emit_expr el2
      @
      [
        Convert (I64 I64Op.ExtendUI32);
        Binary (I64 I64Op.Add)
      ]
    | Ttuple el ->
      List.fold_left (fun lst f -> 
        lst @ (emit_expr f)
      ) [] el    
    | Top (Capply mt, (Top (Cload _ as op, el, _, _), _)::tl, _, _) -> ( 
      let fn_args = ref [] in
      let tl = List.rev tl in
      let expression_list = List.fold_left (fun lst (f, ft) ->
        let result = emit_expr f in
        fn_args := !fn_args @ ft;
        if List.length result > 0 then (
          lst @ [result]
        )
        else
          lst
      ) [] tl in
      let load_action = [to_operations el op] in
      let counter = !unique_name_counter in
      unique_name_counter := !unique_name_counter + 1;
      let name_ = "wasm_unique_name_" ^ string_of_int counter in
      let type_:Ast.type_ = {tname = name_; tdetails = FuncType (!fn_args, [I32Type])} in    
      let w = !wasm_module in
      let drop = 
        if Array.length mt = 0 then 
          [Drop] 
        else 
          [] 
      in    
      wasm_module := Ast.{w with types = w.types @ [type_]};
      
      [CallIndirect (name_, expression_list @ load_action)] @ drop
      )
    | Top (Capply mt, (Tconst_symbol (hd, _), _)::tl, _, _) -> (    
      let expression_list = List.map (fun (e, _) -> emit_expr e) tl in    
      let drop = 
        if Array.length mt = 0 then 
          [Drop] 
        else       
          [] 
      in           
      [Call (hd, expression_list)] 
      @ 
      drop  
    )
    | Top (operation, expression_list, _, _) -> to_operations expression_list operation
    | Tsequence (e, Ttuple []) -> emit_expr e @ [Drop]        
    | Tsequence (e1, e2) -> (emit_expr e1) @ (emit_expr e2)    
    | Tifthenelse (if_, then_, else_, rt) ->           
      let i = emit_expr if_ in
      i
      @
      (
        Stack.push BIfthenelse block_stack;
        let t = emit_expr then_ in        
        let e = emit_expr else_ in   
        let result = [If (rt, t, e)] 
        in
        ignore(Stack.pop block_stack);
        result
      )
    | Tswitch  (sw, ia, ea, _, t) -> (     
      let ea = Array.to_list ea in
      let ia = Array.to_list ia in
      let depth = ref 0 in
      let unique = !unique_counter in
      unique_counter := !unique_counter + 1;
      let rec create_block ints remaining =
        match ints, remaining with
        | i :: re, expr :: rest -> (
          (if i = 0 then  
            Stack.push (BCswitch_case ("main_switch_" ^ (string_of_int unique))) block_stack          
          else
            Stack.push (BCswitch_case ("block_" ^ (string_of_int unique))) block_stack
          );          
          let body = emit_expr expr in            
          depth := !depth + 1;            
          let child_block = create_block re rest in            
          let e = child_block @ body in       
          let z = ref 0 in
          let result = ref 0 in
          Stack.iter (fun b ->
            (match b with 
            | BCswitch_case s when s = ("main_switch_" ^ (string_of_int unique)) -> 
              result := !z;
            | _ -> ());
            z := !z + 1;
          ) block_stack;
          let expr = (e @ 
            (match expr with 
              | Texit _ -> [] 
              | _ when (!depth - 1) <> List.length remaining ->  
                  [Br ("main_switch_" ^ (string_of_int unique), Int32.of_int !result)] 
              | _ -> [] ))  
          in
          let block_type = (if List.length remaining <> List.length ea then         
            []
          else
            t
          )
          in
          ignore(Stack.pop block_stack);      
          if i = 0 then  
            [Block ("main_switch_" ^ (string_of_int unique), block_type, expr)] 
          else
            [Block ("block_" ^ (string_of_int i), block_type, expr)] 

        )
        | _, [] -> (
          Stack.push BCswitch_main block_stack;
          Stack.push BCswitch_main block_stack;
          let tb = BrTable (List.map (fun f -> Int32.of_int (List.length ea - f)) ia, 0l) in
          let e = emit_expr sw in
          depth := !depth + 1;
          let expr = e @ [tb] in
          let table_body = [Block ("table", [], expr)] in
          ignore(Stack.pop block_stack);
          ignore(Stack.pop block_stack);
          let content = table_body @ [Unreachable] in
          [Block ("switch_main", [], content)])
        | _ -> failwith "Should not happen..."
      in 
      create_block ia ea    
      );
    | Tloop e ->
      Stack.push BLoop block_stack;    
      let result = [Loop ([], (emit_expr e) @ [Br ("loop", 0l)])] in
      ignore(Stack.pop block_stack);
      result

    | Tcatch  (_, (i, il, expr) :: [], body, rt) -> (  
      List.iter (fun i -> ignore(add_local ((i.Ident.name ^ "/" ^ (string_of_int i.Ident.stamp)), typ_int))) il;      
      List.iteri (fun pos id -> 
        ccatch_mapping := !ccatch_mapping @ [(i, pos, (id.Ident.name ^ "/" ^ (string_of_int id.Ident.stamp)))]
      ) il;
      Stack.push (BWith i) block_stack;
      let with_ = emit_expr expr in            
      Stack.push BCcatch block_stack;
      let name = "exit_" ^ (string_of_int i) in
      let child_block = [Block ("try_" ^ (string_of_int i), [], (emit_expr body) @ [Br (name, 1l)])] in
      ignore(Stack.pop block_stack);
      let expr = (child_block @ with_) in       
      ignore(Stack.pop block_stack);
      [Block (name, rt, expr)]         
    )
    | Tcatch _ -> assert false
    | Texit (i, el, _ind) ->
      (
        let pos = ref 0 in
        let el = List.fold_left (fun all e ->
          let local_name = find_ccatch_name i !pos in
          pos := !pos + 1;
          all @ [SetLocal (local_name, emit_expr e)]
        ) [] el in        
        let position = ref 0 in
        let found = ref false in
        let result = ref [] in
        Stack.iter (fun str ->
          (match str with 
          | BWith w when w = i -> (           
            found := true;            
            result := [Br ("try_" ^ (string_of_int i), Int32.of_int (!position - 1))]);
          | _ -> ());
          position := !position + 1
        ) block_stack;
              
        el @ !result
      )
    | Ttrywith (rt, body, exn, handler) ->
      let exception_name = exn.Ident.name ^ "/" ^ (string_of_int exn.Ident.stamp) in
      [TryCatch (rt, emit_expr body, exception_name, emit_expr handler)]
  in
  let body = emit_expr typed_cmm 
  in         
  if (Stack.length block_stack <> 0) then (
    failwith "Stack length doesn't equal 0 for some reason..."
  );
  let w = !wasm_module in
  wasm_module := Ast.{w with 
    funcs = w.funcs @ [{
      name = fun_name;
      ftype = fun_name;
      locals = List.map (fun (name, t) -> 
        (name, List.hd (mach_to_wasm (if t = typ_void then typ_int else t)))
      ) !locals;
      body;
      no_of_args = List.length fun_args
    }];
    types = w.types @ [{
      tname = fun_name; 
    tdetails = Types.FuncType (args, mach_to_wasm rt)
    }];
  }

let end_assembly () =
  let w = !wasm_module in
  let func_name = (List.hd (List.rev w.funcs)).name in
  let len = String.length func_name in
  let name_len = String.length "__data_end" in
  let module_name = String.sub func_name (len - name_len) name_len in
  let w = {w with     
    data = w.data @ [
      {
        index = Int32.of_int (List.length w.data);
        offset = [Const (I32 (I32.of_int_s !global_offset))];
        init = {
          name = module_name ^ "__data_end";
          detail = [Int8 0];
        }
      }
    ];
    symbols = w.symbols @ [
      {
        name = (module_name ^ "__data_end");
        details = Data ({
          index = 0l;
          relocation_offset = 0l;
          size = 1l;
          offset = Int32.of_int !global_offset;
        })
      };
    ];
  }
  in
  let (w, f) = Shadow_stack.add_shadow_stack w !functions in  
  let (w, f) = Exception_handling.add_exception_handling w f in
  Branch_check.check w;

  (* let w = !wasm_module in
  let f = !functions in *)

  let w = Linking.create_symbol_table w f in  
  Encode.encode w;
  wasm_module := {
    types = [];
    globals = [];
    tables = Types.[{
      ttype = TableType ({min = 0l; max = Some 0l}, AnyFuncType)
    }];
    memories = Types.[{
      (* TODO: this needs to be improved when doing GC *)
      mtype = MemoryType {min = 100000l; max = Some 100000l}
    }];
    funcs = [];
    start = None;
    elems = [];
    data = [];
    imports = [];
    exports = [];
    symbols = [];
  }

let data dl =  
  if List.length dl > 0 && (List.exists (fun x -> 
  match x with 
  | Csymbol_address _s -> false
  | _ -> true
  ) dl) then (        
    let init = ref [] in
    let start_offset = !global_offset in
    let offset = ref 0 in        
    let symbol_name = ref "" in
    let size = ref 0n in
    let is_closure =
        match List.hd dl with
        | Cint i when (((Nativeint.to_int i) land 255) == 247) -> 
          let (s, _) = blockheader_details i in
          size := s;
          true
        | Csymbol_address _ -> true
        | _ -> false
    in
    List.iter (function
    | Cglobal_symbol _ -> ()
    | Csymbol_address symbol -> (            
        let add =
          if is_closure then               
            [FunctionLoc symbol]
          else  
            [Symbol symbol]
        in
        init := !init @ add;
        offset := !offset + 4;
        ()
        )
    | Cdefine_symbol symbol ->       
      symbol_name := symbol;      
    | Cint8 i -> (
        init := !init @ [Int8 i];
        offset := !offset + 1;
        ()
        )
    | Cint16 i -> (
        init := !init @ [Int16 i];
        offset := !offset + 2;
        ()
        )
    | Cint32 ni -> (
        init := !init @ [Nativeint ni];
        offset := !offset + 4;
        ()
        )
    | Cint ni -> (
        init := !init @ [Nativeint ni];
        offset := !offset + 4;
        ()
        )
    | Csingle d
    | Cdouble d -> (
        init := !init @ [Float64 (F64.of_float d)];
        offset := !offset + 4;
        ()
        )
    | Cstring s -> (
        init := !init @ [Ast.String s];
        offset := !offset + (String.length s);
        ()
        )
    | Cskip i -> 
      init := !init @ 
      (if i = 3 then 
        [Int8 0; Int8 0; Int8 0]
      else if i = 2 then  
        [Int8 0; Int8 0]
      else if i = 1 then
        [Int8 0]
      else 
        []
      );
    | Calign _ -> () (* seems not to be produced anyway in the OCaml codebase *)
    ) dl;

    let w = !wasm_module in
    wasm_module := {w with symbols = w.symbols @ [{
      name = !symbol_name;
      details = Data ({
        index = 0l;
        relocation_offset = 0l;
        size =  Int32.of_int !offset;
        offset = Int32.of_int start_offset
      })
    }]};
    
    let w = !wasm_module in

    global_offset := !global_offset + !offset;

    (* to make sure that this is always seen as data and not an integer *)
    (if !global_offset land 1 <> 0 then global_offset := !global_offset + 1);    
    wasm_module := Ast.{w with data = w.data @ [{
      index =  0l;
      offset = [Const (I32 (I32.of_int_s start_offset))];
      init = {
        name = !symbol_name;
        detail = !init
      }
    }];
  }
)
